//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/_HandOfGodAssets/Prefabs/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""XRRightController"",
            ""id"": ""9cd9c337-236f-465f-98e4-5fe9226fd843"",
            ""actions"": [
                {
                    ""name"": ""position"",
                    ""type"": ""Value"",
                    ""id"": ""b236dec2-b493-4a8c-acfd-08f9e5f8d4ee"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3e34ed57-e8aa-4baa-a2c8-e90c5b7b6819"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerAxis"",
                    ""type"": ""Value"",
                    ""id"": ""7e598f47-46ba-41c2-8eae-aec576b2442c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripAxis"",
                    ""type"": ""Value"",
                    ""id"": ""bb1975ef-fe1e-4271-aafa-e64cf09bd716"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerBtn"",
                    ""type"": ""Button"",
                    ""id"": ""d237d04b-923d-4624-a0e9-90701f3329d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AButton"",
                    ""type"": ""Button"",
                    ""id"": ""e6b81eb5-306b-4f5e-84c1-3357e27399f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""612436d9-34f2-4d04-b30d-97b90ce4a171"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f803e5f7-18a1-4fc2-957d-6e69db28dcc8"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94ba05bd-647e-4cca-b5d9-72264298ee91"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""262a708c-83da-4460-9d75-225580630aef"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f8514ca-acc6-4d2c-a48b-109eec86b6e3"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e03bc0f-981f-416b-9ea1-6ea907cb3b78"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRLeftController"",
            ""id"": ""fd444f05-669e-49ae-ae91-6d88f4b64461"",
            ""actions"": [
                {
                    ""name"": ""position"",
                    ""type"": ""Value"",
                    ""id"": ""edc9d9ca-d035-4805-9c88-08bf05aece3d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""79fa61df-a04f-4104-b228-f7d6267c4fb7"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerAxis"",
                    ""type"": ""Value"",
                    ""id"": ""299f520f-df26-4a85-9521-c3052fbbf94d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripAxis"",
                    ""type"": ""Value"",
                    ""id"": ""e4df9c06-ced0-413a-a427-ab6d5caedb4d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MenuButton"",
                    ""type"": ""Button"",
                    ""id"": ""3d1cc6f1-d68f-4dea-9afc-066217081c5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerBtn"",
                    ""type"": ""Button"",
                    ""id"": ""b03c7e39-6667-4d32-897d-2a547da3f1c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8438b77-c8cd-4f62-a0e6-922e367db466"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eb59382-4324-4820-9e24-00393d965045"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4a55fd6-2241-4fb6-a655-878898f5c47f"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c947102c-d63c-4004-8f68-5e06ffc06cb7"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b70efff-4b88-4195-81ce-5e5cf1067cd6"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aae44b9b-da6c-4112-a6ce-34aab5e9caff"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerBtn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRRightController
        m_XRRightController = asset.FindActionMap("XRRightController", throwIfNotFound: true);
        m_XRRightController_position = m_XRRightController.FindAction("position", throwIfNotFound: true);
        m_XRRightController_rotation = m_XRRightController.FindAction("rotation", throwIfNotFound: true);
        m_XRRightController_TriggerAxis = m_XRRightController.FindAction("TriggerAxis", throwIfNotFound: true);
        m_XRRightController_GripAxis = m_XRRightController.FindAction("GripAxis", throwIfNotFound: true);
        m_XRRightController_TriggerBtn = m_XRRightController.FindAction("TriggerBtn", throwIfNotFound: true);
        m_XRRightController_AButton = m_XRRightController.FindAction("AButton", throwIfNotFound: true);
        // XRLeftController
        m_XRLeftController = asset.FindActionMap("XRLeftController", throwIfNotFound: true);
        m_XRLeftController_position = m_XRLeftController.FindAction("position", throwIfNotFound: true);
        m_XRLeftController_rotation = m_XRLeftController.FindAction("rotation", throwIfNotFound: true);
        m_XRLeftController_TriggerAxis = m_XRLeftController.FindAction("TriggerAxis", throwIfNotFound: true);
        m_XRLeftController_GripAxis = m_XRLeftController.FindAction("GripAxis", throwIfNotFound: true);
        m_XRLeftController_MenuButton = m_XRLeftController.FindAction("MenuButton", throwIfNotFound: true);
        m_XRLeftController_TriggerBtn = m_XRLeftController.FindAction("TriggerBtn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRRightController
    private readonly InputActionMap m_XRRightController;
    private IXRRightControllerActions m_XRRightControllerActionsCallbackInterface;
    private readonly InputAction m_XRRightController_position;
    private readonly InputAction m_XRRightController_rotation;
    private readonly InputAction m_XRRightController_TriggerAxis;
    private readonly InputAction m_XRRightController_GripAxis;
    private readonly InputAction m_XRRightController_TriggerBtn;
    private readonly InputAction m_XRRightController_AButton;
    public struct XRRightControllerActions
    {
        private @PlayerInput m_Wrapper;
        public XRRightControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @position => m_Wrapper.m_XRRightController_position;
        public InputAction @rotation => m_Wrapper.m_XRRightController_rotation;
        public InputAction @TriggerAxis => m_Wrapper.m_XRRightController_TriggerAxis;
        public InputAction @GripAxis => m_Wrapper.m_XRRightController_GripAxis;
        public InputAction @TriggerBtn => m_Wrapper.m_XRRightController_TriggerBtn;
        public InputAction @AButton => m_Wrapper.m_XRRightController_AButton;
        public InputActionMap Get() { return m_Wrapper.m_XRRightController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRRightControllerActions set) { return set.Get(); }
        public void SetCallbacks(IXRRightControllerActions instance)
        {
            if (m_Wrapper.m_XRRightControllerActionsCallbackInterface != null)
            {
                @position.started -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnPosition;
                @position.performed -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnPosition;
                @position.canceled -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnPosition;
                @rotation.started -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnRotation;
                @rotation.performed -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnRotation;
                @rotation.canceled -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnRotation;
                @TriggerAxis.started -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnTriggerAxis;
                @TriggerAxis.performed -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnTriggerAxis;
                @TriggerAxis.canceled -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnTriggerAxis;
                @GripAxis.started -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnGripAxis;
                @GripAxis.performed -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnGripAxis;
                @GripAxis.canceled -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnGripAxis;
                @TriggerBtn.started -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnTriggerBtn;
                @TriggerBtn.performed -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnTriggerBtn;
                @TriggerBtn.canceled -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnTriggerBtn;
                @AButton.started -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnAButton;
                @AButton.performed -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnAButton;
                @AButton.canceled -= m_Wrapper.m_XRRightControllerActionsCallbackInterface.OnAButton;
            }
            m_Wrapper.m_XRRightControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @position.started += instance.OnPosition;
                @position.performed += instance.OnPosition;
                @position.canceled += instance.OnPosition;
                @rotation.started += instance.OnRotation;
                @rotation.performed += instance.OnRotation;
                @rotation.canceled += instance.OnRotation;
                @TriggerAxis.started += instance.OnTriggerAxis;
                @TriggerAxis.performed += instance.OnTriggerAxis;
                @TriggerAxis.canceled += instance.OnTriggerAxis;
                @GripAxis.started += instance.OnGripAxis;
                @GripAxis.performed += instance.OnGripAxis;
                @GripAxis.canceled += instance.OnGripAxis;
                @TriggerBtn.started += instance.OnTriggerBtn;
                @TriggerBtn.performed += instance.OnTriggerBtn;
                @TriggerBtn.canceled += instance.OnTriggerBtn;
                @AButton.started += instance.OnAButton;
                @AButton.performed += instance.OnAButton;
                @AButton.canceled += instance.OnAButton;
            }
        }
    }
    public XRRightControllerActions @XRRightController => new XRRightControllerActions(this);

    // XRLeftController
    private readonly InputActionMap m_XRLeftController;
    private IXRLeftControllerActions m_XRLeftControllerActionsCallbackInterface;
    private readonly InputAction m_XRLeftController_position;
    private readonly InputAction m_XRLeftController_rotation;
    private readonly InputAction m_XRLeftController_TriggerAxis;
    private readonly InputAction m_XRLeftController_GripAxis;
    private readonly InputAction m_XRLeftController_MenuButton;
    private readonly InputAction m_XRLeftController_TriggerBtn;
    public struct XRLeftControllerActions
    {
        private @PlayerInput m_Wrapper;
        public XRLeftControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @position => m_Wrapper.m_XRLeftController_position;
        public InputAction @rotation => m_Wrapper.m_XRLeftController_rotation;
        public InputAction @TriggerAxis => m_Wrapper.m_XRLeftController_TriggerAxis;
        public InputAction @GripAxis => m_Wrapper.m_XRLeftController_GripAxis;
        public InputAction @MenuButton => m_Wrapper.m_XRLeftController_MenuButton;
        public InputAction @TriggerBtn => m_Wrapper.m_XRLeftController_TriggerBtn;
        public InputActionMap Get() { return m_Wrapper.m_XRLeftController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRLeftControllerActions set) { return set.Get(); }
        public void SetCallbacks(IXRLeftControllerActions instance)
        {
            if (m_Wrapper.m_XRLeftControllerActionsCallbackInterface != null)
            {
                @position.started -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnPosition;
                @position.performed -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnPosition;
                @position.canceled -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnPosition;
                @rotation.started -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnRotation;
                @rotation.performed -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnRotation;
                @rotation.canceled -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnRotation;
                @TriggerAxis.started -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnTriggerAxis;
                @TriggerAxis.performed -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnTriggerAxis;
                @TriggerAxis.canceled -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnTriggerAxis;
                @GripAxis.started -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnGripAxis;
                @GripAxis.performed -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnGripAxis;
                @GripAxis.canceled -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnGripAxis;
                @MenuButton.started -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnMenuButton;
                @MenuButton.performed -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnMenuButton;
                @MenuButton.canceled -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnMenuButton;
                @TriggerBtn.started -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnTriggerBtn;
                @TriggerBtn.performed -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnTriggerBtn;
                @TriggerBtn.canceled -= m_Wrapper.m_XRLeftControllerActionsCallbackInterface.OnTriggerBtn;
            }
            m_Wrapper.m_XRLeftControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @position.started += instance.OnPosition;
                @position.performed += instance.OnPosition;
                @position.canceled += instance.OnPosition;
                @rotation.started += instance.OnRotation;
                @rotation.performed += instance.OnRotation;
                @rotation.canceled += instance.OnRotation;
                @TriggerAxis.started += instance.OnTriggerAxis;
                @TriggerAxis.performed += instance.OnTriggerAxis;
                @TriggerAxis.canceled += instance.OnTriggerAxis;
                @GripAxis.started += instance.OnGripAxis;
                @GripAxis.performed += instance.OnGripAxis;
                @GripAxis.canceled += instance.OnGripAxis;
                @MenuButton.started += instance.OnMenuButton;
                @MenuButton.performed += instance.OnMenuButton;
                @MenuButton.canceled += instance.OnMenuButton;
                @TriggerBtn.started += instance.OnTriggerBtn;
                @TriggerBtn.performed += instance.OnTriggerBtn;
                @TriggerBtn.canceled += instance.OnTriggerBtn;
            }
        }
    }
    public XRLeftControllerActions @XRLeftController => new XRLeftControllerActions(this);
    public interface IXRRightControllerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTriggerAxis(InputAction.CallbackContext context);
        void OnGripAxis(InputAction.CallbackContext context);
        void OnTriggerBtn(InputAction.CallbackContext context);
        void OnAButton(InputAction.CallbackContext context);
    }
    public interface IXRLeftControllerActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnTriggerAxis(InputAction.CallbackContext context);
        void OnGripAxis(InputAction.CallbackContext context);
        void OnMenuButton(InputAction.CallbackContext context);
        void OnTriggerBtn(InputAction.CallbackContext context);
    }
}
